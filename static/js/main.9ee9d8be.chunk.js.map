{"version":3,"sources":["ShareButton.js","DropDownMenu.js","NextButton.js","App.js","index.js"],"names":["ShareButton","props","useState","open","setOpen","className","href","onClick","icon","children","DropDownMenu","DropDownItem","leftIcon","NextButton","buttonDisplayName","clickHandler","id","App","state","quotes","currentIndex","colors","newIndex","bind","fetch","then","data","json","setState","Math","floor","random","this","length","color","toString","document","body","style","backgroundColor","getElementById","console","log","selectedQuote","quote","author","Component","ReactDOM","render","StrictMode"],"mappings":"qPAeeA,MAbf,SAAqBC,GAAQ,IAAD,EACFC,oBAAS,GADP,mBACnBC,EADmB,KACbC,EADa,KAG1B,OACE,wBAAIC,UAAU,YACZ,uBAAGC,KAAK,IAAID,UAAU,QAAQE,QAAS,kBAAMH,GAASD,KACnDF,EAAMO,MAERL,GAAQF,EAAMQ,WCSNC,MAjBf,WACE,SAASC,EAAaV,GACpB,OACE,uBAAGK,KAAK,IAAID,UAAU,aACpB,0BAAMA,UAAU,eAAeJ,EAAMW,UACpCX,EAAMQ,UAIb,OACE,yBAAKJ,UAAU,YACb,kBAACM,EAAD,CAAcC,SAAU,MAAxB,WACA,kBAACD,EAAD,kBCLSE,EANI,SAAC,GAAD,IAAGC,EAAH,EAAGA,kBAAmBC,EAAtB,EAAsBA,aAAtB,OACjB,4BAAQV,UAAU,UAAUW,GAAG,QAAQT,QAASQ,GAC7CD,ICyEUG,E,kDAxEb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDiB,MAAQ,CACXC,OAAQ,GACRC,aAAc,KACdC,OAAQ,IAEV,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKH,aAAe,EAAKA,aAAaG,KAAlB,gBARH,E,gEAaE,IAAD,OAClBC,MACE,yIAECC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACN,GAAD,OAAY,EAAKS,SAAS,CAAET,UAAU,EAAKG,e,qCAanD,OADaO,KAAKC,MAAM,EAAID,KAAKE,UAAYC,KAAKd,MAAMC,OAAOc,OAAS,M,iCAOxED,KAAKJ,SAAS,CAAER,aAAcY,KAAKZ,iBAEnC,IAAMc,EAAQL,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBI,SAAS,IAC5DC,SAASC,KAAKC,MAAMC,gBAAkB,IAAML,EAE5CE,SAASI,eAAe,SAASF,MAAMJ,MAAQ,IAAMA,I,+BAOrD,OADAO,QAAQC,IAAIV,KAAKd,MAAME,cAErB,yBAAKf,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACZ2B,KAAKW,cAAL,YAA0BX,KAAKW,cAAcC,MAA7C,MAAyD,IAE5D,yBAAKvC,UAAU,UACZ2B,KAAKW,cAAL,YAA0BX,KAAKW,cAAcE,QAAW,IAE3D,6BACA,kBAAC,EAAD,CACE/B,kBAAkB,aAClBC,aAAciB,KAAKV,WAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,W,oCAxCR,OAAOU,KAAKd,MAAMC,OAAOa,KAAKd,MAAME,kB,GAzBtB0B,aCAlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASI,eAAe,U","file":"static/js/main.9ee9d8be.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction ShareButton(props) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <li className=\"nav-item\">\r\n      <a href=\"#\" className=\"share\" onClick={() => setOpen(!open)}>\r\n        {props.icon}\r\n      </a>\r\n      {open && props.children}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ShareButton;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction DropDownMenu() {\r\n  function DropDownItem(props) {\r\n    return (\r\n      <a href=\"#\" className=\"menu-item\">\r\n        <span className=\"icon-button\">{props.leftIcon}</span>\r\n        {props.children}\r\n      </a>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <DropDownItem leftIcon={\"hi\"}>Twitter</DropDownItem>\r\n      <DropDownItem>Twitter</DropDownItem>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropDownMenu;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst NextButton = ({ buttonDisplayName, clickHandler }) => (\r\n  <button className=\"nextbtn\" id=\"right\" onClick={clickHandler}>\r\n    {buttonDisplayName}\r\n  </button>\r\n);\r\n\r\nexport default NextButton;\r\n","import React, { Component } from \"react\";\nimport ShareButton from \"./ShareButton.js\";\nimport DropDownMenu from \"./DropDownMenu.js\";\nimport NextButton from \"./NextButton.js\";\nimport \"./index.css\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      currentIndex: null,\n      colors: \"\",\n    };\n    this.newIndex = this.newIndex.bind(this);\n    this.currentIndex = this.currentIndex.bind(this);\n  }\n\n  /* getting the quotes */\n\n  componentDidMount() {\n    fetch(\n      \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\"\n    )\n      .then((data) => data.json())\n      .then((quotes) => this.setState({ quotes }, this.newIndex));\n  }\n\n  /* returning the indexth quote */\n\n  get selectedQuote() {\n    return this.state.quotes[this.state.currentIndex];\n  }\n\n  /* random index */\n\n  currentIndex() {\n    const rand = Math.floor(0 + Math.random() * (this.state.quotes.length - 1));\n    return rand;\n  }\n\n  /* setting the random index in the state AND bg color */\n\n  newIndex() {\n    this.setState({ currentIndex: this.currentIndex() });\n\n    const color = Math.floor(Math.random() * 16777215).toString(16);\n    document.body.style.backgroundColor = \"#\" + color;\n    // document.getElementById(\"left\").style.color = \"#\" + color;\n    document.getElementById(\"right\").style.color = \"#\" + color;\n  }\n\n  /* rendering */\n\n  render() {\n    console.log(this.state.currentIndex);\n    return (\n      <div className=\"App\">\n        <div className=\"quote-box\">\n          <div className=\"quote\">\n            {this.selectedQuote ? `\" ${this.selectedQuote.quote} \"` : \"\"}\n          </div>\n          <div className=\"author\">\n            {this.selectedQuote ? `- ${this.selectedQuote.author}` : \"\"}\n          </div>\n          <br />\n          <NextButton\n            buttonDisplayName=\"Next Quote\"\n            clickHandler={this.newIndex}\n          />\n          <ShareButton>\n            <DropDownMenu />\n          </ShareButton>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//   render (){\n//     <div className=\"quote-box\">\n//       <NextButton />\n//       <ShareButton>\n//         <DropDownMenu />\n//       </ShareButton>\n//     </div>\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}